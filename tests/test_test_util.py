"""Units tests for test utils."""

import textwrap
from pathlib import Path

import pytest

from .util import code_equal, no_extra_files


def test_no_extra_files(tmpdir_cd):
    assert no_extra_files()

    Path("test.txt").touch()
    assert not no_extra_files()
    assert no_extra_files(expected="test.txt")
    Path("test.txt").unlink()

    Path("src").mkdir()
    assert not no_extra_files()
    assert no_extra_files(expected=["src/"])
    assert no_extra_files(expected=["src"])
    assert not no_extra_files(expected=["src/test.txt"])

    Path("src/test.txt").touch()
    assert not no_extra_files()
    assert not no_extra_files(expected=["test.txt"])
    assert no_extra_files(expected=["src/test.txt"])
    assert no_extra_files(expected=["src/"])
    assert no_extra_files(expected=["src"])


code_template = textwrap.dedent(
    """\
    # # Autogenerated from `{filename}`
    # This file was created by Implectus {version}.  Do not edit this file;
    # edit `{filename}` instead.

    def hello():
        print("Hello world")
        return True
    """
)


def _test_code_equal(actual, expected):
    """Check all the ways code_equal works for equal code."""
    assert code_equal(actual, expected, None)
    code_equal(actual, expected, True)
    with pytest.raises(AssertionError):
        code_equal(actual, expected, False)


def _test_code_unequal(actual, expected):
    """Check all the ways code_equal works for unequal code."""
    assert not code_equal(actual, expected, None)
    code_equal(actual, expected, False)
    with pytest.raises(AssertionError):
        code_equal(actual, expected, True)


def test_code_equal_identical():
    code = code_template.format(filename="main.py", version="0.0.1")

    _test_code_equal(code, code)


def test_code_equal_different_versions():
    actual = code_template.format(filename="main.py", version="0.0.1")
    expected = code_template.format(filename="main.py", version="1.0")

    _test_code_equal(actual, expected)


def test_code_equal_different_files():
    actual = code_template.format(filename="main.py", version="0.0.1")
    expected = code_template.format(filename="other_module.py", version="0.0.1")
    _test_code_unequal(actual, expected)


def test_code_equal_inconsistent_files():
    actual = code_template.format(filename="main.py", version="0.0.1")
    actual = actual.replace("main.py", "notebooks/main.py", 1)
    expected = code_template.format(filename="notebooks/main.py", version="0.0.1")
    _test_code_unequal(actual, expected)


# TODO: test code_equal more thoroughly and with files
# TODO: dest doc_equal
